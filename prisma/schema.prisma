generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  portfolio     Portfolio?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Projects {
  id     Int    @id @default(autoincrement())
  name   String?
  image String?
  description String?
  githubLink String?
  liveLink String?
  ProjectId Int
  portfolio Portfolio @relation(fields: [ProjectId], references: [id], onDelete: Cascade)
}

model Work {
  id     Int    @id @default(autoincrement())
  title   String?
  wordId Int
  portfolio Portfolio @relation(fields: [wordId], references: [id], onDelete: Cascade)
}

model Skills {
  id     Int    @id @default(autoincrement())
  value   String?
  label   String?
  skillId Int
  portfolio Portfolio @relation(fields: [skillId], references: [id], onDelete: Cascade)
}

model Testimonials {
  id     Int    @id @default(autoincrement())
  name   String?
  description String?
  testimonialId Int
  portfolio Portfolio @relation(fields: [testimonialId], references: [id], onDelete: Cascade)
}

model Links {
  id     Int    @id @default(autoincrement())
  name   String?
  url String?
  linkId Int
  portfolio Portfolio @relation(fields: [linkId], references: [id], onDelete: Cascade)
}

model Contact {
  id     Int    @id @default(autoincrement())
  name   String?
  email String?
  address String?
  phone String?
  contactId Int @unique
  portfolio Portfolio @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model Portfolio {
  id      Int   @default(autoincrement()) @id
  name    String?
  userEmail   String @unique
  position String?
  query String?
  backgroundColor String?
  textColor String?
  image String?
  about String?
  projects    Projects[]
  work Work[]
  skills Skills[]
  testimonials Testimonials[]
  contact Contact?
  links Links[]
  user    User @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}
